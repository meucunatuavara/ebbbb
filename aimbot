
local encodedKeys = {
    "Y2NkYzE0MjNkZmYzZmZkZDdmMzk4ZGU0M2Y2NmE4ZGFiYzY2NzI5ZGZkY2JjZDc2NmVjNmRlN2FkMTNk", -- Exemplo de chave 1
    "NzMwN2MwNzU2YWRjY2ZjMzI5NTIzZmYwZTU5ZmNkMzMwN2I4ZTQzMjMwN2U2ZDhlODFlMzFkN2M5YWI3"  -- Exemplo de chave 2
}

local function decryptBase64(encodedStr)
    return game:GetService("HttpService"):Base64Decode(encodedStr)
end

local function validateKey(enteredKey)
    for _, encodedKey in ipairs(encodedKeys) do
        local decodedKey = decryptBase64(encodedKey)
        if enteredKey == decodedKey then
            return true
        end
    end
    return false
end

local screenGui = Instance.new("ScreenGui", game.CoreGui)
screenGui.Name = "AimbotKeyValidation"
screenGui.Enabled = true

local frame = Instance.new("Frame", screenGui)
frame.AnchorPoint = Vector2.new(0.5, 0.5)
frame.Position = UDim2.new(0.5, 0, 0.5, 0)
frame.Size = UDim2.new(0, 300, 0, 200)
frame.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
frame.BackgroundTransparency = 0.1
frame.BorderSizePixel = 0

local title = Instance.new("TextLabel", frame)
title.Text = "Enter Activation Key"
title.Font = Enum.Font.SourceSansBold
title.TextSize = 20
title.TextColor3 = Color3.new(1, 1, 1)
title.Size = UDim2.new(1, -20, 0, 40)
title.Position = UDim2.new(0, 10, 0, 5)
title.BackgroundTransparency = 1

local keyInput = Instance.new("TextBox", frame)
keyInput.Font = Enum.Font.SourceSans
keyInput.TextSize = 18
keyInput.TextColor3 = Color3.new(1, 1, 1)
keyInput.Size = UDim2.new(1, -20, 0, 40)
keyInput.Position = UDim2.new(0, 10, 0, 60)
keyInput.BackgroundColor3 = Color3.new(0.3, 0.3, 0.3)
keyInput.PlaceholderText = "Enter your key"

local submitButton = Instance.new("TextButton", frame)
submitButton.Text = "Submit"
submitButton.Font = Enum.Font.SourceSans
submitButton.TextSize = 18
submitButton.TextColor3 = Color3.new(1, 1, 1)
submitButton.Size = UDim2.new(0.8, 0, 0, 40)
submitButton.Position = UDim2.new(0.1, 0, 0.6, 0)
submitButton.BackgroundColor3 = Color3.new(0.3, 0.3, 0.3)

local errorMessage = Instance.new("TextLabel", frame)
errorMessage.Text = ""
errorMessage.Font = Enum.Font.SourceSans
errorMessage.TextSize = 16
errorMessage.TextColor3 = Color3.new(1, 0, 0)
errorMessage.Size = UDim2.new(1, -20, 0, 30)
errorMessage.Position = UDim2.new(0, 10, 0, 120)
errorMessage.BackgroundTransparency = 1

submitButton.MouseButton1Click:Connect(function()
    local enteredKey = keyInput.Text
    if validateKey(enteredKey) then
        screenGui.Enabled = false
    else
        errorMessage.Text = "Invalid Key! Please try again."
    end
end)
